{{ define "style" }}
  <style>
    #advanced {
      display: none;
    }
    .image {
      max-width: 100%;
    }
  </style>
{{ end }}
{{ define "content" }}
  <nav>
    <a href="/upload">Upload</a>
  </nav>

  {{ $inputSize := 60 }}
  {{ $taRows := 6 }}

  {{ if .Err }}
    <div class="block block-danger">
      {{ .Err }}
    </div>
  {{ end }}
  <form action="/load" method="POST" enctype="multipart/form-data">
    <label for="loadCSVFile"><b>Load CSV File</b></label>
    <br>
    <input id="loadCSVFile" name="csvFilename" type="file" accept=".csv" required>
    <input type="submit" value="Load from CSV">
    <button id="toggleButton" type="button">Advanced +</button>
    <br>
  </form>
  <form action="/update" method="POST">
    <div id="advanced">
      <label for="csvFilenameInput"><b>CSV Filename</b></label>
      <br>
      <input id="csvFilenameInput" type="text" name="csvFilename" value="{{ .CSVFilename }}" size="{{ $inputSize }}">
      <input id="saveCSVSubmit" type="submit" value="Save to CSV">
      <br>
      <label for="directory"><b>Working Directory</b></label>
      <br>
      <input id="directory" type="text" name="prefix" value="{{ .WorkingDir }}" disabled size="{{ $inputSize }}">
      <br>
      <label for="prefixInput"><b>Server Path Prefix</b> (It will replace working directory path prefix)</label>
      <br>
      <input id="prefixInput" type="text" name="prefix" value="{{ .Prefix }}" size="{{ $inputSize }}">
      <br>
      <label for="useLinuxSepInput"><b>Use Linux Separator "/" when saving to CSV</b> </label>
      <br>
      <input id="useLinuxSepInput" type="checkbox" name="useLinuxSep" {{if eq .UseLinuxSep true}}checked{{end}}>
      (Check, if working on a windows machine and want to upload to a Linux machine)
      <input id="scroll" type="hidden" name="scroll" value="">
    </div>

    <section>
      {{ if .Images }}
        <h2>Images</h2>
      {{ else }}
        <h2>No Images found in local directory</h2>
        Add some and then refresh.
      {{ end }}

      {{ range .Images }}
        <article>
          <fieldset>
            <a id="tags{{ .ID }}"></a>
            <a id="img{{ .ID }}"></a>
            <legend>{{ .Name }}</legend>
            <a href="#img{{ .ID }}"><img class="image" src="/img/{{ .ID }}" alt="{{ .Name }}"></a>
            <br>
            <label for="tagsTextArea{{ .ID }}"><b>Tags</b></label>
            <div id="loader{{ .ID }}" class="loader loader-small"></div>
            <br>
            <textarea id="tagsTextArea{{ .ID }}" data-loader="loader{{ .ID }}" name="image[{{ .ID }}].tags" class="awesomeplete" data-multiple cols="{{ $inputSize }}" rows="{{ $taRows }}">{{ join .Tags " " }}</textarea>
            <br>
            <label for="sourceInput{{ .ID }}"><b>Source</b></label>
            <br>
            <input id="sourceInput{{ .ID }}" type="text" name="image[{{ .ID }}].source" value="{{ .Source }}" size="{{ $inputSize }}">
            <br>
            <label><b>Rating</b></label>
            <br>
            <input id="sRadio{{ .ID }}" type="radio" name="image[{{ .ID }}].rating" value="s" {{ if eq .Rating "s" }}checked{{ end }}>
            <label for="sRadio{{ .ID }}">Safe</label>
            <input id="qRadio{{ .ID }}" type="radio" name="image[{{ .ID }}].rating" value="q" {{ if eq .Rating "q" }}checked{{ end }}>
            <label for="qRadio{{ .ID }}">Questionable</label>
            <input id="eRadio{{ .ID }}" type="radio" name="image[{{ .ID }}].rating" value="e" {{ if eq .Rating "e" }}checked{{ end }}>
            <label for="eRadio{{ .ID }}">Explicit</label>
            <br>
            <input type="submit" value="Save to CSV" onclick="setScroll(this)" data-scroll="#tags{{.ID}}">
          </fieldset>
        </article>
        <br>
      {{ end }}
    </section>
  </form>
{{ end }}
{{ define "script" }}
  <script>
    (function(){
      "use strict";

      function setScroll(e) {
        var scroll = e.getAttribute("data-scroll");
        document.getElementById("scroll").value = scroll;
      }

      var toggleButton = document.getElementById("toggleButton")
      toggleButton.onclick = toggleAdvanced;

      function toggleAdvanced() {
        var b = document.getElementById("toggleButton");
        var div = document.getElementById("advanced");
        // Empty display reverts to CSS rule, in this case none.
        if (div.style.display == '') {
          div.style.display = 'block';
          b.innerHTML = "Advanced -";
        } else {
          div.style.display = '';
          b.innerHTML = "Advanced +";
        }
      }

      // Autocomplete

      var map = {};
      var tas = document.querySelectorAll('textarea[data-multiple]');
      tas.forEach(function(ta){
        var ap = makeAwesomplete(ta);
        map[ta.id] = ap;
        ta.onkeyup = getTagsEventHandler;
      });
      function makeAwesomplete(ta) {
        return new Awesomplete(ta, {
          filter: function(text, input) {
            return Awesomplete.FILTER_CONTAINS(text, input.match(/[^ ]*$/)[0]);
          },

          item: function(text, input) {
            return Awesomplete.ITEM(text, input.match(/[^ ]*$/)[0]);
          },

          replace: function(text) {
            var before = this.input.value.match(/^.+ \s*|/)[0];
            this.input.value = before + text.value + " ";
          },
          // Set sort function to false to disable sorting. Our backend handler
          // returns items sorted by count (first kusubooru then danbooru).
          sort: false
        });
      }

      var timeout = null;
      function getTagsEventHandler(e) {
        var code = (e.keyCode || e.which);
        // https://github.com/LeaVerou/awesomplete/issues/16802#issuecomment-303124988
        if (code !== 37 && code !== 38 && code !== 39 && code !== 40 && code !== 27 && code !== 13) {
          var input = this.value;
          var id = this.id;
          var loaderID = this.getAttribute('data-loader');
          // Wait for user to stop typing before getting tags:
          // https://schier.co/blog/2014/12/08/wait-for-user-to-stop-typing-using-javascript.html
          clearTimeout(timeout);

          timeout = setTimeout(function () {
              getTags(input.match(/[^ ]*$/)[0], id, loaderID);
          }, 500);
        }
      }

      function getTags(query, apid, loaderID) {
        if (query == "" || query.length < 3) {
          return;
        }
        var loader = document.getElementById(loaderID);
        loader.style.display = "inline-block";
        var list=[];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function(response) {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              loader.style.display = "none";
              var tags = JSON.parse(xhr.responseText);
              tags.forEach(function(item) {
                var label = item.name;
                if (item.old) {
                  label = item.old+" â†’ "+item.name;
                }
                if (item.category == "kusubooru") {
                  label = '<img src="img/kusubooru.ico" style="float:left;margin-right:2px;height:16px;width:16px">' + label
                }
                if (item.category == "danbooru") {
                  label = '<img src="img/danbooru.ico" style="float:left;margin-right:2px">' + label
                }
                label = label + '<span style="float:right">'+item.count+'</span>';
                list.push({"label": label, "value": item.name, "cound": item.count});
              });
              map[apid].list = list;
              // Update the placeholder text.
              //input.placeholder = "e.g. datalist";
            } else {
              // An error occured :(
              //input.placeholder = "Couldn't load datalist options :(";
            }
          }
        };
        xhr.open("GET", "tags?q="+query, true);
        xhr.send();
      }

    })();
  </script>
{{ end }}
