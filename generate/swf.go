// +build ignore

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"text/template"

	"github.com/kusubooru/local-tagger/split"
)

const (
	in  = "generate/swf.jpg"
	out = "swf.go"
)

var swfTemplate = `// generated by go generate; DO NOT EDIT

package main

var (
	swfImageBytes = []byte {
		{{.}}
	}
)
`

var swfTmpl = template.Must(template.New("swfTemplate").Parse(swfTemplate))

func main() {
	if err := generateSwf(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

const byteColumns = 16

func generateSwf() error {
	inf, err := os.Open(in)
	if err != nil {
		return err
	}
	b, err := ioutil.ReadAll(inf)
	if err != nil {
		return err
	}
	outf, err := os.Create(out)
	if err != nil {
		return err
	}
	defer func() {
		if cerr := outf.Close(); err == nil {
			err = cerr
		}
	}()

	bfmt := bytesfmt(b, byteColumns)

	err = swfTmpl.Execute(outf, bfmt)
	if err != nil {
		return err
	}

	cmd := exec.Command("gofmt", "-w", out)
	err = cmd.Run()
	if err != nil {
		return err
	}
	return err
}

func bytesfmt(data []byte, n int) string {
	var buffer bytes.Buffer

	data2d := split.Bytes(data, n)

	for _, row := range data2d {
		for _, b := range row {
			buffer.WriteString(fmt.Sprintf("%v, ", b))
		}
		buffer.WriteString("\n")
	}

	return fmt.Sprintf(buffer.String())
}
